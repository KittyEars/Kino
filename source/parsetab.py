
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '0D576B2246DDF95F454EA0C4BEB6A6F6'
    
_lr_action_items = {'INT':([0,3,4,5,6,9,10,14,19,20,22,26,34,39,40,41,42,46,49,51,],[7,7,-4,-5,-6,-20,-21,-8,-19,-9,-18,-7,-11,-10,7,7,-25,-23,7,-22,]),'IDENTIFIER':([0,3,4,5,6,7,9,10,14,15,16,17,18,19,20,21,22,23,26,27,28,29,30,31,32,33,34,38,39,40,41,42,46,49,51,],[8,8,-4,-5,-6,14,-20,-21,-8,19,19,19,19,-19,-9,19,-18,-12,-7,19,19,-13,-14,-15,-16,-17,-11,19,-10,8,8,-25,-23,8,-22,]),'WHILE':([0,3,4,5,6,9,10,14,19,20,22,26,34,39,40,41,42,46,49,51,],[11,11,-4,-5,-6,-20,-21,-8,-19,-9,-18,-7,-11,-10,11,11,-25,-23,11,-22,]),'IF':([0,3,4,5,6,9,10,14,19,20,22,26,34,39,40,41,42,46,49,51,],[12,12,-4,-5,-6,-20,-21,-8,-19,-9,-18,-7,-11,-10,12,12,-25,-23,12,-22,]),'$end':([1,2,3,4,5,6,9,10,13,14,19,20,22,26,34,39,42,46,51,],[0,-1,-2,-4,-5,-6,-20,-21,-3,-8,-19,-9,-18,-7,-11,-10,-25,-23,-22,]),'RBRACE':([3,4,5,6,9,10,13,14,19,20,22,26,34,39,42,44,45,46,50,51,],[-2,-4,-5,-6,-20,-21,-3,-8,-19,-9,-18,-7,-11,-10,-25,46,47,-23,51,-22,]),'EQ':([8,14,],[15,18,]),'LPAREN':([11,12,19,],[16,17,27,]),'NUMBER':([15,16,17,18,19,21,22,23,27,28,29,30,31,32,33,34,38,39,42,],[22,22,22,22,-19,22,-18,-12,22,22,-13,-14,-15,-16,-17,-11,22,-10,-25,]),'DEREF':([15,16,17,18,19,21,22,23,27,28,29,30,31,32,33,34,38,39,42,],[23,23,23,23,-19,23,-18,-12,23,23,-13,-14,-15,-16,-17,-11,23,-10,-25,]),'PLUS':([19,20,22,24,25,26,34,38,39,42,],[-19,29,-18,29,29,29,29,29,29,-25,]),'MINUS':([19,20,22,24,25,26,34,38,39,42,],[-19,30,-18,30,30,30,30,30,30,-25,]),'MULT':([19,20,22,24,25,26,34,38,39,42,],[-19,31,-18,31,31,31,31,31,31,-25,]),'EQV':([19,20,22,24,25,26,34,38,39,42,],[-19,32,-18,32,32,32,32,32,32,-25,]),'NEQV':([19,20,22,24,25,26,34,38,39,42,],[-19,33,-18,33,33,33,33,33,33,-25,]),'RPAREN':([19,22,24,25,34,37,38,39,42,43,],[-19,-18,35,36,-11,42,-28,-10,-25,-29,]),'LBRACE':([35,36,48,],[40,41,49,]),'ELSE':([47,],[48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file':([0,],[1,]),'program':([0,3,40,41,49,],[2,13,44,45,50,]),'line':([0,3,40,41,49,],[3,3,3,3,3,]),'declaration':([0,3,40,41,49,],[4,4,4,4,4,]),'assignment':([0,3,40,41,49,],[5,5,5,5,5,]),'control':([0,3,40,41,49,],[6,6,6,6,6,]),'loop':([0,3,40,41,49,],[9,9,9,9,9,]),'conditional':([0,3,40,41,49,],[10,10,10,10,10,]),'expression':([15,16,17,18,21,27,28,38,],[20,24,25,26,34,38,39,38,]),'unary_op':([15,16,17,18,21,27,28,38,],[21,21,21,21,21,21,21,21,]),'primative_op':([20,24,25,26,34,38,39,],[28,28,28,28,28,28,28,]),'arguments':([27,38,],[37,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file","S'",1,None,None,None),
  ('file -> program','file',1,'p_program_entire','kino_parse.py',18),
  ('program -> line','program',1,'p_program_expr','kino_parse.py',23),
  ('program -> line program','program',2,'p_program_expr','kino_parse.py',24),
  ('line -> declaration','line',1,'p_line_expr','kino_parse.py',31),
  ('line -> assignment','line',1,'p_line_expr','kino_parse.py',32),
  ('line -> control','line',1,'p_line_expr','kino_parse.py',33),
  ('declaration -> INT IDENTIFIER EQ expression','declaration',4,'p_declaration','kino_parse.py',36),
  ('declaration -> INT IDENTIFIER','declaration',2,'p_declaration','kino_parse.py',37),
  ('assignment -> IDENTIFIER EQ expression','assignment',3,'p_assignment','kino_parse.py',41),
  ('expression -> expression primative_op expression','expression',3,'p_primative','kino_parse.py',45),
  ('expression -> unary_op expression','expression',2,'p_primative_unary','kino_parse.py',49),
  ('unary_op -> DEREF','unary_op',1,'p_primative_unary_op','kino_parse.py',53),
  ('primative_op -> PLUS','primative_op',1,'p_primative_op','kino_parse.py',57),
  ('primative_op -> MINUS','primative_op',1,'p_primative_op','kino_parse.py',58),
  ('primative_op -> MULT','primative_op',1,'p_primative_op','kino_parse.py',59),
  ('primative_op -> EQV','primative_op',1,'p_primative_op','kino_parse.py',60),
  ('primative_op -> NEQV','primative_op',1,'p_primative_op','kino_parse.py',61),
  ('expression -> NUMBER','expression',1,'p_expression_number','kino_parse.py',65),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','kino_parse.py',69),
  ('control -> loop','control',1,'p_control','kino_parse.py',74),
  ('control -> conditional','control',1,'p_control','kino_parse.py',75),
  ('conditional -> IF LPAREN expression RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE','conditional',11,'p_conditional','kino_parse.py',79),
  ('loop -> WHILE LPAREN expression RPAREN LBRACE program RBRACE','loop',7,'p_loop','kino_parse.py',83),
  ('function_decl -> INT IDENTIFIER LPAREN parameters RPAREN LBRACE program RBRACE','function_decl',8,'p_function_decl','kino_parse.py',87),
  ('expression -> IDENTIFIER LPAREN arguments RPAREN','expression',4,'p_function_call','kino_parse.py',91),
  ('parameters -> declaration','parameters',1,'p_parameters','kino_parse.py',95),
  ('parameters -> declaration parameters','parameters',2,'p_parameters','kino_parse.py',96),
  ('arguments -> expression','arguments',1,'p_arguments','kino_parse.py',103),
  ('arguments -> expression arguments','arguments',2,'p_arguments','kino_parse.py',104),
]
